CREATE SEQUENCE UTILISATEURSequence START WITH 1;
CREATE OR REPLACE TRIGGER UTILISATEURInsert
  BEFORE INSERT ON UTILISATEUR FOR EACH ROW
BEGIN
  SELECT UTILISATEURSequence.NEXTVAL
    INTO :new.id_utilisateur
    FROM DUAL;
END;
/

CREATE SEQUENCE LANGUESequence START WITH 1;
CREATE OR REPLACE TRIGGER LANGUEInsert
  BEFORE INSERT ON LANGUE FOR EACH ROW
BEGIN
  SELECT LANGUESequence.NEXTVAL
    INTO :new.id_langue
    FROM DUAL;
END;
/

CREATE SEQUENCE SERVICESequence START WITH 1;
CREATE OR REPLACE TRIGGER SERVICEInsert
  BEFORE INSERT ON SERVICE FOR EACH ROW
BEGIN
  SELECT SERVICESequence.NEXTVAL
    INTO :new.id_service
    FROM DUAL;
END;
/

CREATE SEQUENCE SERVICELANGUESequence START WITH 1;
CREATE OR REPLACE TRIGGER SERVICELANGUEInsert
  BEFORE INSERT ON SERVICELANGUE FOR EACH ROW
BEGIN
  SELECT SERVICELANGUESequence.NEXTVAL
    INTO :new.id_serviceLangue
    FROM DUAL;
END;
/

/* CREATE SEQUENCE AVOIRDIFFERENTELANGUESequence START WITH 1;
CREATE OR REPLACE TRIGGER AVOIRDIFFERENTELANGUEInsert
  BEFORE INSERT ON AVOIRDIFFERENTELANGUE FOR EACH ROW
BEGIN
  SELECT AVOIRDIFFERENTELANGUESequence.NEXTVAL
    INTO :new.ID
    FROM DUAL;
END;
/ */

CREATE SEQUENCE TYPESERVICESequence START WITH 1;
CREATE OR REPLACE TRIGGER TYPESERVICEInsert
  BEFORE INSERT ON TYPESERVICE FOR EACH ROW
BEGIN
  SELECT TYPESERVICESequence.NEXTVAL
    INTO :new.id_typeService
    FROM DUAL;
END;
/

CREATE SEQUENCE TYPEDEVISESequence START WITH 1;
CREATE OR REPLACE TRIGGER TYPEDEVISEInsert
  BEFORE INSERT ON TYPEDEVISE FOR EACH ROW
BEGIN
  SELECT TYPEDEVISESequence.NEXTVAL
    INTO :new.id_typeDevise
    FROM DUAL;
END;
/

CREATE SEQUENCE RESERVATIONSequence START WITH 1;
CREATE OR REPLACE TRIGGER RESERVATIONInsert
  BEFORE INSERT ON RESERVATION FOR EACH ROW
BEGIN
  SELECT RESERVATIONSequence.NEXTVAL
    INTO :new.id_reservation
    FROM DUAL;
END;
/

CREATE SEQUENCE ORDREDEMISSIONSequence START WITH 1;
CREATE OR REPLACE TRIGGER ORDREDEMISSIONInsert
  BEFORE INSERT ON ORDREDEMISSION FOR EACH ROW
BEGIN
  SELECT ORDREDEMISSIONSequence.NEXTVAL
    INTO :new.id_ordreDeMission
    FROM DUAL;
END;
/

CREATE SEQUENCE DEVISSequence START WITH 1;
CREATE OR REPLACE TRIGGER DEVISInsert
  BEFORE INSERT ON DEVIS FOR EACH ROW
BEGIN
  SELECT DEVISSequence.NEXTVAL
    INTO :new.id_devis
    FROM DUAL;
END;
/

CREATE SEQUENCE FACTURESequence START WITH 1;
CREATE OR REPLACE TRIGGER FACTUREInsert
  BEFORE INSERT ON FACTURE FOR EACH ROW
BEGIN
  SELECT FACTURESequence.NEXTVAL
    INTO :new.id_facture
    FROM DUAL;
END;
/

CREATE SEQUENCE PAIEMENTSequence START WITH 1;
CREATE OR REPLACE TRIGGER PAIEMENTInsert
  BEFORE INSERT ON PAIEMENT FOR EACH ROW
BEGIN
  SELECT PAIEMENTSequence.NEXTVAL
    INTO :new.id_paiement
    FROM DUAL;
END;


CREATE OR REPLACE TRIGGER PAIEMENTInsert
  BEFORE INSERT ON PAIEMENT FOR EACH ROW
BEGIN
  SELECT PAIEMENTSequence.NEXTVAL
    INTO :new.id_paiement
    FROM DUAL;
END;
/


CREATE OR REPLACE TRIGGER RESERVATIONTaken
  AFTER INSERT ON RESERVATION FOR EACH ROW
  
  DECLARE 
  existeOrdre number:=0;
  existeDevis number:=0;
BEGIN
    Select count(*) into existeOrdre from ORDREDEMISSION where idReservation_ordreDeMission = :new.ID_RESERVATION;
    
    Select count(*) into existeDevis from DEVIS where idReservation_devis = :new.ID_RESERVATION;
    
    IF (existeOrdre > 0) AND (existeDevis > 0) THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ordre et Devis déjà existant');
    ELSE
        INSERT INTO ORDREDEMISSION(IDRESERVATION_ORDREDEMISSION, VALIDEPRESTA_ORDREDEMISSION, FICHIERPRESTA_ORDREDEMISSION) VALUES(:new.ID_RESERVATION, 0, EMPTY_BLOB());
        INSERT INTO DEVIS(IDRESERVATION_DEVIS, VALIDE_DEVIS, FICHIER_DEVIS) VALUES(:new.ID_RESERVATION, 0, EMPTY_BLOB());
    
        DBMS_OUTPUT.PUT_LINE('Enregistrement inséré avec succès dans les tables OrdreDeMission et Devis');
    END IF;
END;
/